#!/usr/bin/env node
// Copyright 2017-2023 @polkadot/dev authors & contributors
// SPDX-License-Identifier: Apache-2.0

const fs = require('node:fs');
const os = require('node:os');
const path = require('node:path');
const cp = require('node:child_process');

/**
 * Process execution
 *
 * @param {string} cmd
 * @param {boolean} [noLog]
 **/
function execSync (cmd, noLog) {
  !noLog && console.log(`$ ${cmd.replace(/ {2}/g, ' ')}`);

  cp.execSync(cmd, { stdio: 'inherit' });
}

/** Runs the clean command */
function runClean () {
  execSync('yarn polkadot-dev-clean-build');
}

/** Runs the lint command */
function runLint () {
  execSync('yarn lint');
}

/** Runs the test command */
function runTest () {
  execSync('yarn test');
}

/** Runs the build command */
function runBuild () {
  execSync('yarn build');
}

/**
 * Retrieves the path of the root package.json
 *
 * @returns {string}
 */
function npmGetJsonPath () {
  return path.resolve(process.cwd(), 'package.json');
}

/**
 * Retrieves the contents of the root package.json
 *
 * @returns {{ name: string; version: string; versions?: { npm?: string; git?: string } }}
 */
function npmGetJson () {
  return JSON.parse(
    fs.readFileSync(npmGetJsonPath(), 'utf8')
  );
}

/**
 * Retrieved the current version included in package.json
 *
 * @returns {string}
 */
function npmGetVersion () {
  return npmGetJson().version;
}

/**
 * Sets the npm token in the home directory
 */
function npmSetup () {
  const registry = 'registry.npmjs.org';

  fs.writeFileSync(path.join(os.homedir(), '.npmrc'), `//${registry}/:_authToken=${process.env.NPM_TOKEN}`);
}

/**
 * Publishes the current package
 *
 * @returns {void}
 */
function npmPublish () {
  const extraFiles = npmGetJson()['files'] || [];

  ['LICENSE', 'package.json'].concat(extraFiles).forEach((file) => execSync(`cp -r ./${file} build/`));

  process.chdir('build');

  const tag = npmGetVersion().includes('-') ? '--tag beta' : '';
  let count = 1;

  while (true) {
    try {
      execSync(`npm publish --access public ${tag}`);

      break;
    } catch {
      if (count < 5) {
        const end = Date.now() + 15000;

        console.error(`Publish failed on attempt ${count}/5. Retrying in 15s`);
        count++;

        while (Date.now() < end) {
          // just spin our wheels
        }
      }
    }
  }

  process.chdir('..');
}

/**
 * Loops through the packages/* (or root), executing the supplied
 * function for each package found
 *
 * @param {() => unknown} fn
 */
function loopFunc (fn) {
  if (fs.existsSync('packages')) {
    fs
      .readdirSync('packages')
      .filter((dir) => {
        const pkgDir = path.join(process.cwd(), 'packages', dir);

        return fs.statSync(pkgDir).isDirectory() &&
          fs.existsSync(path.join(pkgDir, 'package.json')) &&
          fs.existsSync(path.join(pkgDir, 'build'));
      })
      .forEach((dir) => {
        process.chdir(path.join('packages', dir));
        fn();
        process.chdir('../..');
      });
  } else {
    fn();
  }
}

// first do infrastructure setup
npmSetup();

// perform the actual CI ops
runClean();
runLint();
runTest();
runBuild();

// publish to npm
loopFunc(npmPublish);
